#
# Calcula os LLOCs(Logical Lines of Code) dos projetos da Base query.
#

p: Project = input;

LLOCsEHCount: int;
LLOCsEH: output sum[string] of int;

LLOCsThrowCount: int;
LLOCsThrow: output sum[string] of int;

LLOCsTryCount: int;
LLOCsTry: output sum[string] of int;

LLOCsCatchCount: int;
LLOCsCatch: output sum[string] of int;

LLOCsFinallyCount: int;
LLOCsFinally: output sum[string] of int;

firstCommitDate: time;
lastCommitDate: time;

triesStack: stack of string;
push (triesStack, "BOTTOM");

catchesStack: stack of string;
push (catchesStack, "BOTTOM");

finalliesStack: stack of string;
push (finalliesStack, "BOTTOM");




visit(p, visitor
{
	# look at Java-only projects  
	before n: Project ->
	{
	    ifall (i: int; !match(`^java$`, lowercase(n.programming_languages[i])))
	    	stop;
		
		# Projects queries
		LLOCsEHCount = 0;	
		LLOCsThrowCount = 0;		
		LLOCsTryCount = 0;
		LLOCsCatchCount = 0;
		LLOCsFinallyCount = 0;
	}
	
	before n: CodeRepository ->
	{
		snapshot := getsnapshot(n, "SOURCE_JAVA_JLS");
		
		# Verifica se existem arquivos Java validos
		if (len (snapshot) > 0)
		{
			firstCommitDate = n.revisions[0].commit_date;
			lastCommitDate = n.revisions[ len(n.revisions) - 1 ].commit_date;
			
			if ( lastCommitDate > addmonth(firstCommitDate,6) && len(n.revisions) > 30)
			{	
				foreach (i: int; def(snapshot[i]))
				{
					visit(snapshot[i]);
				}
				
				LLOCsEH[p.name] << LLOCsEHCount;
				LLOCsThrow[p.name] << LLOCsThrowCount;
				LLOCsTry[p.name] << LLOCsTryCount;
				LLOCsCatch[p.name] << LLOCsCatchCount;
				LLOCsFinally[p.name] << LLOCsFinallyCount;
			}
		}
		
		stop;		
	}
	
	before node: Statement ->
	{
		if (node.kind == StatementKind.TRY)
		{
		    push (triesStack, "Try");
		    
		    #statementsCount := len(node.statements);
		    #if ( statementsCount > 0 )
		    #{
		    # 	for (i := 0; i < statementsCount - 1 ; i++)
			#	{
			#		visit(node.statements[i]);
			#	}
			#	
			#	if ( node.statements[statementsCount - 1].kind != StatementKind.CATCH )
			#	{
			#		push (finalliesStack, "Finally");
			#		visit(node.statements[statementsCount - 1]);
			#		pop (finalliesStack);
			#	}
			#	else
			#	{
			#		visit(node.statements[statementsCount - 1]);
			#	}
		    #}
		    
		}
		else if (node.kind == StatementKind.CATCH)
		{
		    push (catchesStack, node.variable_declaration.variable_type.name);
		}
		else if (node.kind != StatementKind.BLOCK)
        {
        	isEHStatement := false;
        	
        	if (node.kind == StatementKind.THROW)
			{
			    LLOCsThrowCount++;
			    isEHStatement = true;
			}
        				
			if ( peek (triesStack) != "BOTTOM" )
			{
				LLOCsTryCount++;
				isEHStatement = true;
			}
			
			if ( peek (catchesStack) != "BOTTOM" )
			{
				LLOCsCatchCount++;
				isEHStatement = true;
			}
			
			if ( peek (finalliesStack) != "BOTTOM" )
			{
				LLOCsFinallyCount++;
				isEHStatement = true;
			}
        	
            if ( isEHStatement )
            {
            	LLOCsEHCount++;
            }
        }
	}
	
	after node: Statement ->
	{
		if (node.kind == StatementKind.CATCH)
		{
		    pop (catchesStack);
		}
		else if (node.kind == StatementKind.TRY)
		{
		    pop (triesStack);
		}
	}
});