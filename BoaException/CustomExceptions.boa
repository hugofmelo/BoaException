#
# Conta as custom exceptions dos projetos da Base query
#

p: Project = input;

exceptionsCounter: int;
exceptions: output sum[string] of int;

firstCommitDate: time;
lastCommitDate: time;

visit(p, visitor
{
	# look at Java-only projects  
	before n: Project ->
	{
	    ifall (i: int; !match(`^java$`, lowercase(n.programming_languages[i])))
	    	stop;
		
		# Projects queries
		exceptionsCounter = 0;
	}
	
	after n: Project ->
	{
		exceptions[p.name] << exceptionsCounter;
	}
	
	before n: CodeRepository ->
	{
		snapshot := getsnapshot(n, "SOURCE_JAVA_JLS");
		
		# Verifica se existem arquivos Java validos
		if (len (snapshot) > 0)
		{
			firstCommitDate = n.revisions[0].commit_date;
			lastCommitDate = n.revisions[ len(n.revisions) - 1 ].commit_date;
			
			if ( lastCommitDate > addmonth(firstCommitDate,6) && len(n.revisions) > 30)
			{	
				foreach (i: int; def(snapshot[i]))
				{
					visit(snapshot[i]);
				}
			}
		}
		
		stop;		
	}
	
	
	before node: Declaration ->
	{
		if (node.kind == TypeKind.CLASS)
		{
			if (match (`.*Exception$`, node.name))
			{
			    exceptionsCounter++;
			}
		}
	}
});